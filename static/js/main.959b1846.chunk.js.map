{"version":3,"sources":["logo.svg","component/Square.js","component/Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","this","props","plotValue","cellClicked","className","style","onClick","React","Component","Board","onChangeCellValue","Index","state","square","ploatSymbol","setState","console","groupEnd","calculateSequers","sequre","answars","i","length","anArray","Rest","Array","fill","status1","status2","rowStyle","display","instructionsStyle","winner","player","pointerEvents","opacity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.959b1846.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport class Square extends React.Component {\n    render() {\n\n        const squareStyle = {\n            'width':'100px',\n            'height':'100px',\n            'backgroundColor': '#AA00FF',\n            'border': ' 1px solid blue',\n            'margin': '6px',\n            'display': 'flex',\n            'justifyContent': 'center',\n            'alignItems': 'center',\n            'fontSize': '50px',\n            'color': 'white'\n          }\n          \n    const { plotValue , cellClicked} = this.props;\n      return (\n        <div\n          className=\"square\"\n          style={squareStyle} onClick={ () => cellClicked()}>\n           { plotValue }   \n        </div>\n      );\n    }\n  }\n","import React from \"react\";\nimport { Square } from \"./Square\";\n\n\nexport class Board extends React.Component {\n\n\nconstructor(props){\n    super(props);\n    this.state= {\n        square: Array(9).fill(null),\n        plotValue: true\n    }\n}\n\n\n\n    onChangeCellValue  = (Index) => {\n\n        const { plotValue , square } = this.state;\n        let ploatSymbol  = plotValue? 'X': 'O';\n    \n        square[Index-1] = ploatSymbol;\n        this.setState({ square: square, plotValue: !plotValue });\n        console.groupEnd();\n      }\n\n\n    calculateSequers = (sequre) =>{\n        \n        let answars = [\n            [1,2,3],\n            [4,5,6],\n            [7,8,9],\n            \n            [1,4,7],\n            [2,5,8],\n            [3,6,9],\n\n            [1,5,9],\n            [3,5,7]\n        ];\n\n        // n*1 approch\n        for( let i=0; i< answars.length; i++){\n            let anArray = answars[i];\n             if(sequre[anArray[0]-1] == sequre[anArray[1]-1] && sequre[anArray[1]-1] == sequre[anArray[2]-1] && sequre[anArray[2]-1]){\n                 return true;\n             }   \n        }\n\n        return false;\n    }   \n\n\n    Rest = () =>{\n          this.setState({ square: Array(9).fill(null)});\n    } \n\n    render() {\n\n\n        //style portion \n        const rowStyle = {\n            display: 'flex'\n          }\n          const boardStyle = {\n            'backgroundColor': '#eee',\n            'width': '350px',\n            'height': '350px',\n            'alignItems': 'center',\n            'justifyContent': 'center',\n            'display': 'flex',\n            'flexDirection': 'column',\n            'border': '3px #eee solid'\n          }\n          \n          const containerStyle = {\n            'display': 'flex',\n            'alignItems': 'center',\n            'flexDirection': 'column'\n          }\n          \n          const instructionsStyle = {\n            'marginTop': '5px',\n            'marginBottom': '5px',\n            'fontWeight': 'bold',\n            'fontSize': '16px',\n          }\n          \n          const buttonStyle = {\n            'marginTop': '15px',\n            'marginBottom': '16px',\n            'width': '80px',\n            'height': '40px',\n            'backgroundColor': '#8acaca',\n            'color': 'white',\n            'fontSize': '16px',\n          }  \n    \n\n        const { square, plotValue} = this.state;  \n        \n        const winner = this.calculateSequers(square);\n        let status1;\n        let status2;\n        let player  = plotValue? 'X':'O';\n        if(winner){\n            status1  = 'Winner :'+ player;\n        }  else {\n           status2 =  'Next player: '+ player;\n        }\n\n\n        return (\n        <div style={containerStyle} className=\"gameBoard\">\n          <div className=\"status\" style={instructionsStyle}>{status2}</div>\n        <div className=\"winner\" style={instructionsStyle}>{status1}</div>\n          <button style={buttonStyle} onClick={()=> this.Rest()}>Reset</button>\n          <div className=\"container\" style={ winner? {pointerEvents: \"none\", opacity: \"0.4\"}:{\"\":\"\"} }>\n          <div className=\"board-row\" style={rowStyle} >\n            <Square cellClicked={() => this.onChangeCellValue(1)} plotValue={square[0]} />\n            <Square cellClicked={() => this.onChangeCellValue(2)} plotValue={square[1]}/>\n            <Square cellClicked={() => this.onChangeCellValue(3)} plotValue={square[2]}/>\n          </div>\n          <div className=\"board-row\" style={rowStyle}>\n            <Square cellClicked={() => this.onChangeCellValue(4)} plotValue={square[3]}/>\n            <Square cellClicked={() => this.onChangeCellValue(5)} plotValue={square[4]}/>\n            <Square cellClicked={() => this.onChangeCellValue(6)} plotValue={square[5]}/>\n          </div>\n          <div className=\"board-row\" style={rowStyle}>\n            <Square cellClicked={() => this.onChangeCellValue(7)} plotValue={square[6]}/>\n            <Square cellClicked={() => this.onChangeCellValue(8)} plotValue={square[7]}/>\n            <Square cellClicked={() => this.onChangeCellValue(9)} plotValue={square[8]}/>\n          </div>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Board  } from \"./component/Board\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n      <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}